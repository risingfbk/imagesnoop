#!/usr/bin/env python3

from bcc import BPF
from bcc.utils import printb
import jsonlines
import ctypes as ct
import argparse
from datetime import datetime

TASK_COMM_LEN = 16

def encoder(obj):
    if isinstance(obj, bytes):
        return obj.decode('utf-8')
    return 

class Data(ct.Structure):
    _fields_ = [("ts_us", ct.c_uint64),
                ("pid", ct.c_uint32),
                ("tid", ct.c_uint32),
                ("uid", ct.c_uint32),
                ("comm", ct.c_char * TASK_COMM_LEN),
                ("argv", ct.c_char * 256)]
    
    def getdict(self):
        return dict((f, getattr(self, f)) for f, _ in self._fields_)

# arguments
examples = """examples:
    ./mkdirsnoop               # trace all mkdir() and mkdirat() syscalls
    ./mkdirsnoop -P/--pid 181  # only trace new processes which PID is 181
    ./mkdirsnoop -f filename   # change where the log will be save 
"""
parser = argparse.ArgumentParser(
    description="Trace mkdir() and mkdirat syscalls",
    formatter_class=argparse.RawDescriptionHelpFormatter,
    epilog=examples)
parser.add_argument("-P", "--pid",
    help="trace this PID only")
parser.add_argument("-f", "--file",
    help="Log file name", default="log.json")
args = parser.parse_args()

# define BPF program
prog = """
#include <linux/sched.h>

#define ARGSIZE 256
#define MAXARG 16

BPF_PERF_OUTPUT(events);

struct data_t {
    u64 ts_us;
    u32 pid;  // PID as in the userspace term (i.e. task->tgid in kernel)
    u32 tid; // Parent PID as in the userspace term (i.e task->real_parent->tgid in kernel)
    u32 uid;
    char comm[TASK_COMM_LEN];
    char argv[ARGSIZE];
};


static int submit_arg(struct pt_regs *ctx, void *ptr, struct data_t *data)
{
    bpf_probe_read_user(data->argv, sizeof(data->argv), ptr);
    events.perf_submit(ctx, data, sizeof(struct data_t));
    return 1;
}

int syscall__mkdir(struct pt_regs *ctx, 
    const char __user *filename, 
    const int __user *mode) {

    struct data_t data = {};
    struct task_struct *task;

    u32 uid = bpf_get_current_uid_gid() & 0xffffffff;
    data.uid = uid;

    u64 pid_tgid = bpf_get_current_pid_tgid();
    data.pid = pid_tgid >> 32;
    data.tid = pid_tgid;

    task = (struct task_struct *)bpf_get_current_task();
    //data.ppid = task->real_parent->tgid;

    data.ts_us = bpf_ktime_get_ns() / 1000;

    PID_FILTER

    bpf_get_current_comm(&data.comm, sizeof(data.comm));
    
    submit_arg(ctx, (void *)filename, &data);

    return 0;
}

int syscall__mkdirat(struct pt_regs *ctx, 
    const int __user *dirfd,
    const char __user *filename, 
    const int __user *mode) {

    struct data_t data = {};
    struct task_struct *task;

    u32 uid = bpf_get_current_uid_gid() & 0xffffffff;
    data.uid = uid;

    u64 pid_tgid = bpf_get_current_pid_tgid();
    data.pid = pid_tgid >> 32;
    data.tid = pid_tgid;

    task = (struct task_struct *)bpf_get_current_task();
    //data.ppid = task->real_parent->tgid;

    data.ts_us = bpf_ktime_get_ns() / 1000;

    PID_FILTER

    bpf_get_current_comm(&data.comm, sizeof(data.comm));
    
    submit_arg(ctx, (void *)filename, &data);

    return 0;
}
"""

if args.pid:
    prog = prog.replace('PID_FILTER',
        'if (data.pid != %s) { return 0; }' % args.pid)
else:
    prog = prog.replace('PID_FILTER', '')

# load BPF program
b = BPF(text=prog)

b.attach_kprobe(event=b.get_syscall_fnname("mkdirat"), fn_name="syscall__mkdirat")
b.attach_kprobe(event=b.get_syscall_fnname("mkdir"), fn_name="syscall__mkdir")

# header
print("Running mkdirsnoop ... Hit Ctrl-C to end")

def print_event(cpu, data, size):

    event = ct.cast(data, ct.POINTER(Data)).contents

    #save log as jsonlines
    with jsonlines.open(args.file, "a") as writer:
        tmp_dict = event.getdict()
        #  tmp_dict["datetime"] = datetime.timestamp(datetime.now())
        for i in tmp_dict.keys():
            if type(tmp_dict[i]) == bytes:
               tmp_dict[i] = tmp_dict[i].decode('utf-8')
        writer.write(tmp_dict)

# loop with callback to print_event
b["events"].open_perf_buffer(print_event)
while True:
    try:
        b.perf_buffer_poll()
    except KeyboardInterrupt:
        exit()