#!/usr/bin/env python3

from bcc import BPF
from bcc.containers import filter_by_containers
from bcc.utils import printb
import argparse
from socket import inet_ntop, ntohs, AF_INET, AF_INET6
from struct import pack
from time import sleep
import ctypes as ct
import jsonlines
from datetime import datetime

# arguments
examples = """examples:
    ./tcpconnect           # trace all TCP connect()s
    ./tcpconnect -p 181    # only trace PID 181
"""
parser = argparse.ArgumentParser(
    description="Trace TCP connects",
    formatter_class=argparse.RawDescriptionHelpFormatter,
    epilog=examples)
parser.add_argument("-P", "--pid",
    help="trace this PID only")
parser.add_argument("-f", "--file",
    help="Log file name", default="tcp.json")
parser.add_argument("-c", "--count", action="store_true",
    help="count connects per src ip and dest ip/port")
args = parser.parse_args()

TASK_COMM_LEN = 16

class Data(ct.Structure):

    _fields_ = [("ts_us", ct.c_uint64),
                ("pid", ct.c_uint32),
                ("tid", ct.c_uint32),
                ("uid", ct.c_uint32),
                ("saddr", ct.c_uint32),
                ("daddr", ct.c_uint32),
                ("lport", ct.c_uint16),
                ("dport", ct.c_uint16),
                ("comm", ct.c_char * TASK_COMM_LEN)
                ]
    
    def getdict(self):
        return dict((f, getattr(self, f)) for f, _ in self._fields_)

# define BPF program
bpf_text = """
#include <uapi/linux/ptrace.h>
#include <net/sock.h>
#include <bcc/proto.h>
#include <linux/sched.h>

BPF_HASH(currsock, u32, struct sock *);

// separate data structs for ipv4 and ipv6
struct ipv4_data_t {
    u64 ts_us;
    u32 pid;
    u32 tid;
    u32 uid;
    u32 saddr;
    u32 daddr;
    u16 lport;
    u16 dport;
    char comm[TASK_COMM_LEN];
};
BPF_PERF_OUTPUT(ipv4_events);

// separate flow keys per address family
struct ipv4_flow_key_t {
    u32 saddr;
    u32 daddr;
    u16 dport;
};
BPF_HASH(ipv4_count, struct ipv4_flow_key_t);

int trace_connect_entry(struct pt_regs *ctx, struct sock *sk)
{
    u64 pid_tgid = bpf_get_current_pid_tgid();
    u32 pid = pid_tgid >> 32;
    u32 tid = pid_tgid;

    struct task_struct *task;

    task = (struct task_struct *)bpf_get_current_task();
    u32 ppid = task->real_parent->tgid;

    FILTER_PID

    u32 uid = bpf_get_current_uid_gid();

    // stash the sock ptr for lookup on return
    currsock.update(&tid, &sk);

    return 0;
};

static int trace_connect_return(struct pt_regs *ctx, short ipver)
{
    int ret = PT_REGS_RC(ctx);
    u64 pid_tgid = bpf_get_current_pid_tgid();
    u32 pid = pid_tgid >> 32;
    u32 tid = pid_tgid;

    struct task_struct *task;

    task = (struct task_struct *)bpf_get_current_task();
    u32 ppid = task->real_parent->tgid;

    FILTER_PID    

    struct sock **skpp;
    skpp = currsock.lookup(&tid);
    if (skpp == 0) {
        return 0;   // missed entry
    }

    if (ret != 0) {
        // failed to send SYNC packet, may not have populated
        // socket __sk_common.{skc_rcv_saddr, ...}
        currsock.delete(&tid);
        return 0;
    }

    // pull in details
    struct sock *skp = *skpp;
    u16 lport = skp->__sk_common.skc_num;
    u16 dport = skp->__sk_common.skc_dport;

    if (ipver != 4) { return 0; }

    IPV4_CODE

    currsock.delete(&tid);

    return 0;
}

int trace_connect_v4_return(struct pt_regs *ctx)
{
    return trace_connect_return(ctx, 4);
}
"""

struct_init = {'ipv4':
        {'count':
               """
               struct ipv4_flow_key_t flow_key = {};
               flow_key.saddr = skp->__sk_common.skc_rcv_saddr;
               flow_key.daddr = skp->__sk_common.skc_daddr;
               flow_key.dport = ntohs(dport);
               ipv4_count.increment(flow_key);""",
          'trace':
               """
               struct ipv4_data_t data4 = {.pid = pid, .tid = tid};
               data4.uid = bpf_get_current_uid_gid();
               data4.ts_us = bpf_ktime_get_ns() / 1000;
               data4.saddr = skp->__sk_common.skc_rcv_saddr;
               data4.daddr = skp->__sk_common.skc_daddr;
               data4.lport = lport;
               data4.dport = ntohs(dport);
               bpf_get_current_comm(&data4.comm, sizeof(data4.comm));
               ipv4_events.perf_submit(ctx, &data4, sizeof(data4));"""
        }
}

# code substitutions
if args.count:
    bpf_text = bpf_text.replace("IPV4_CODE", struct_init['ipv4']['count'])
else:
    bpf_text = bpf_text.replace("IPV4_CODE", struct_init['ipv4']['trace'])

if args.pid:
    bpf_text = bpf_text.replace('FILTER_PID',
        'if (pid != %s) { return 0; }' % args.ppid)
else:
    bpf_text = bpf_text.replace('FILTER_PID', '')
    
# process event
def print_ipv4_event(cpu, data, size):
    # event = b["ipv4_events"].event(data)
    # dest_ip = inet_ntop(AF_INET, pack("I", event.daddr)).encode()
    # #ppid = os.system("ps -o ppid %d" % event.pid)
    # #print(ppid)
    # printb(b"%-7d %-7d %-12.12s %-2d %-16s %-16s %-6d" % (event.pid, event.ppid,
    #     event.task, event.ip,
    #     inet_ntop(AF_INET, pack("I", event.saddr)).encode(),
    #     dest_ip, event.dport))

    event = ct.cast(data, ct.POINTER(Data)).contents

    #save log as jsonlines
    with jsonlines.open(args.file, "a") as writer:
        tmp_dict = event.getdict()
        tmp_dict['saddr'] = inet_ntop(AF_INET, pack("I", tmp_dict['saddr'])).encode()
        tmp_dict['daddr'] = inet_ntop(AF_INET, pack("I", tmp_dict['daddr'])).encode()
        for i in tmp_dict.keys():
            if type(tmp_dict[i]) == bytes:
               tmp_dict[i] = tmp_dict[i].decode('utf-8')
        writer.write(tmp_dict)

def depict_cnt(counts_tab):
    for k, v in sorted(counts_tab.items(),
                       key=lambda counts: counts[1].value, reverse=True):
        depict_key = "%-25s %-25s %-20s" % \
                        ((inet_ntop(AF_INET, pack('I', k.saddr))),
                        inet_ntop(AF_INET, pack('I', k.daddr)), k.dport)

        print("%s %-10d" % (depict_key, v.value))

# initialize BPF
b = BPF(text=bpf_text)
b.attach_kprobe(event="tcp_v4_connect", fn_name="trace_connect_entry")
b.attach_kretprobe(event="tcp_v4_connect", fn_name="trace_connect_v4_return")

print("Tracing connect ... Hit Ctrl-C to end")
if args.count:
    try:
        while True:
            sleep(99999999)
    except KeyboardInterrupt:
        pass

    # header
    print("\n%-25s %-25s %-20s %-10s" % (
        "LADDR", "RADDR", "RPORT", "CONNECTS"))
    depict_cnt(b["ipv4_count"])
# read events
else:
    # header
    # print("%-7s %-7s %-12s %-2s %-16s %-16s %-6s" % ("PID", "PPID", "COMM", "IP", "SADDR",
            # "DADDR", "DPORT"))

    # read events
    b["ipv4_events"].open_perf_buffer(print_ipv4_event)

    while True:
        try:
            b.perf_buffer_poll()
        except KeyboardInterrupt:
            exit()
